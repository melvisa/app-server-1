<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:jee="http://www.springframework.org/schema/jee"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:task="http://www.springframework.org/schema/task" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task  
        http://www.springframework.org/schema/task/spring-task-3.2.xsd 
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

 
      <!-- 定时任务 -->
     <task:annotation-driven/>  
<!--      <bean id ="TimerTask" class="com.app.hupi.TimerTask" lazy-init="false"></bean> -->
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.app.hupi.*"></context:component-scan>
      <context:component-scan base-package="com.gitee.sunchenbin.mybatis.actable.manager.*" />
    <context:property-placeholder location="classpath*:properties.properties" />
    


<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">   -->
<!--     <property name="messageConverters">   -->
<!--         <list>   -->
<!--             <ref bean="jsonHttpMessageConverter" />   -->
<!--         </list>   -->
<!--     </property>   -->
<!-- </bean>   -->
  
<!-- <bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">   -->
<!--     <property name="supportedMediaTypes">   -->
<!--         <list>   -->
<!--             <value>application/json;charset=UTF-8</value>   -->
<!--         </list>   -->
<!--     </property>   -->
<!-- </bean>  -->


    <mvc:default-servlet-handler />
    <mvc:resources mapping="swagger-ui.html"
        location="classpath:/META-INF/resources/" />
    <mvc:resources mapping="/webjars/**"
        location="classpath:/META-INF/resources/webjars/" />

<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />
  <bean id="contentNegotiationManager"
             class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
       <property name="defaultContentType" value="application/json;charset=UTF-8" />
</bean>

        <!-- 事务 -->
        <tx:annotation-driven transaction-manager="txManager"/>    
       <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">    
         <property name="dataSource" ref="dataSource-dbcp"/>
      </bean> 


    <!-- 配置mysql连接 -->
    <bean id="dataSource-dbcp" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- 这是mybatis-enhance-actable的功能开关配置文件,其实就是将上面第2点说的autoCreateTable.properties文件注册到spring中，以便底层的mybatis-enhance-actable的方法能够获取到 -->
    <bean id="configProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:properties.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties" />
    </bean>
    <!-- 配置mybatis的SQLSessionFactory -->
    <bean id="sqlSessionFactory"
        class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource-dbcp"></property>
        <!-- 自动扫描mappers.xml文件 -->
        <property name="mapperLocations">
            <array>
                <value>classpath*:com/sunchenbin/store/mapping/*/*.xml
                </value>
                <value>classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml
                </value>
                <value>classpath*:mappers/*.xml</value>
            </array>
        </property>
        <!-- mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml "></property>
        <property name="typeAliasesPackage" value="com.app.hupi.domain" />
    </bean>
    <!-- 设置mapper接口包的位置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"
            value="com.app.hupi.mapper;com.gitee.sunchenbin.mybatis.actable.dao.*" />
    </bean>

		<!-- 多部分文件上传 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		     <property name="maxUploadSize" value="104857600" />
		     <property name="maxInMemorySize" value="4096" />
		     <property name="defaultEncoding" value="UTF-8"></property>
		</bean>


    <!-- redis连接池 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <!-- 连接池配置，类似数据库连接池 -->
    <bean id="connectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="password" value="${redis.password}"></property>
        <property name="poolConfig" ref="poolConfig"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't 
            cast to String！！ -->
        <property name="keySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean
                class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <!--开启事务 -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

 
</beans>